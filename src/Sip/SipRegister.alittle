
namespace ALittle;

public struct RegisterInfo
{
	string account;			// 账号名，也是号码
	string auth_account;		// 用于鉴权的账号
	string auth_password;	// 用于鉴权的密码
}

// 注册信息
public class RegisterObject
{
    private RegisterInfo _info;			// 账号名，也是号码
    private SipRegister _sip_register;
    
    private string _last_status;		// 上次注册结果
    
    private int _register_timer;		// 注册定时器
    private int _check_timer;			// 注册超时定时器

    public ctor(RegisterInfo info, SipRegister sip_register)
    {
        this._info = info;
        this._sip_register = sip_register;
    }

    public fun IsChecking() : bool { return this._check_timer != null; }
    public fun IsRegistering() : bool { return this._register_timer != null; }
    public fun GetLastStatus() : string { return this._last_status; }
    public fun IsSame(RegisterInfo info) : bool
    {
        if (this._info.account != info.account) return false;
        if (this._info.auth_account != info.auth_account) return false;
        if (this._info.auth_password != info.auth_password) return false;
        return true;
    }
    public fun GetInfo() : RegisterInfo { return this._info; }

    public fun StopCheckTimer()
    {
        if (this._check_timer == null) return;

        A_LoopSystem.RemoveTimer(this._check_timer);
        this._check_timer = null;
    }

    public fun StopRegisterTimer()
    {
        if (this._register_timer == null) return;

        A_LoopSystem.RemoveTimer(this._register_timer);
        this._register_timer = null;
    }

    public fun StartRegisterTimer(int delay_ms)
    {
        this.StopRegisterTimer();
        this._register_timer = A_LoopSystem.AddTimer(delay_ms, bind(this.HandleRegisterTimer, this));
    }

    private fun HandleRegisterTimer()
    {
        this._register_timer = null;
        this._last_status = "正在注册";
        this._sip_register.RegisterAccount(this._info.account);
        this.StartCheckTimer();
    }

    public fun StartCheckTimer()
    {
        var delay_ms = 60 * 1000;
        this.StopCheckTimer();
        this._check_timer = A_LoopSystem.AddTimer(delay_ms, bind(this.HandleCheckTimer, this));
    }

    private fun HandleCheckTimer()
    {
        this._check_timer = null;
        this._last_status = "注册超时";
        this._sip_register.RegisterAccount(this._info.account);
        this.StartCheckTimer();
    }

    public fun HandleSucceed()
    {
        this._last_status = "注册成功";
        this.StopCheckTimer();
        this.StartRegisterTimer(ALittle.Math_Floor(this._sip_register.GetExpires() / 2) * 1000);
    }

    public fun HandleFailed(string error)
    {
        this._last_status = error;
        if (this._last_status == null)
        	this._last_status = "注册失败";
        this.StopCheckTimer();
        this.StartRegisterTimer(60 * 1000);
    }
}

public class SipRegister
{
    // 归属的SIP系统
    private SipSystem _sip_system;

    // 配置属性
    private int _expires = 3600;		// 注册超时时长
    private int _max_per_second = 0;	// 每秒最多注册多少个

    // 所有注册信息
    private Map<string, RegisterObject> _register_map = new Map<string, RegisterObject>();

    // 初始化
    public fun Setup(SipSystem sip_system, int expires, int max_per_second)
    {
        this._sip_system = sip_system;
        this._expires = expires;
        this._max_per_second = max_per_second;
    }

    // 释放
    public fun Shutdown()
    {
        for (var key, info in this._register_map)
        {
            info.StopRegisterTimer();
            info.StopCheckTimer();
        }
        this._register_map = new Map<string, RegisterObject>();
    }

    // 注册账号接口
    public fun RegisterAccount(string account)
    {
        this._sip_system.RegisterAccount(account);
    }

    // 获取注册统计
    public fun GetSipRegisterStatistics() : string
    {
        // 账号总数
        var account_count = 0;
        // 正在注册数量
        var check_count = 0;
        // 等待注册
        var register_count = 0;

        // 错误原因
        var error_map = new Map<string, List<string>>();
        for (var account, info in this._register_map)
        {
            account_count += 1;
            if (info.IsChecking())
            	check_count += 1;
            
            if (info.IsRegistering())
            	register_count += 1;

            var last_status = info.GetLastStatus();
            if (last_status != null)
            {
                var list = error_map[last_status];
                if (list == null)
                {
                    list = new List<string>();
                    error_map[last_status] = list;
                }
                ALittle.List_Push(list, account);
            }
        }

        var log = "账号总数:"..account_count.." 正在注册:"..check_count.." 等待下次注册:"..register_count;
        for (var error, list in error_map)
        {
            var count = ALittle.List_Len(list);
            log = log.."\n"..count..":"..error;
            if (error != "注册成功")
	            log = log.."\n"..ALittle.String_Join(list, ",");
        }

        return log;
    }

    // 获取超时时间
    protected fun GetExpires() : int { return this._expires; }

    // 获取密码
    public fun GetRegisterInfo(string account) : RegisterInfo
    {
        var info = this._register_map[account];
        if (info == null) return null;
        return info.GetInfo();
    }

    // 当SIP流程确认注册成功之后，那么调用这个函数
    protected fun HandleRegisterSucceed(string account)
    {
        var info = this._register_map[account];
        if (info == null) return;
        info.HandleSucceed();
    }

    // 当SIP流程注册失败
    protected fun HandleRegisterFailed(string account, string error)
    {
        var info = this._register_map[account];
        if (info == null) return;
        info.HandleFailed(error);
    }

    // 重新加载账号配置
    public fun ReloadRegister(Map<string, RegisterInfo> account_map_info)
    {
        // 把当前的信息都认为是要移除的
        var remove_map = new Map<string, RegisterObject>();
        for (var account, info in this._register_map)
        	remove_map[account] = info;

        // 遍历所有数据，整理到_register_map
        for (var account, detail in account_map_info)
        {
            var info = this._register_map[account];
            // 如果不存在，或者信息不一致
            if (info != null && !info.IsSame(detail))
            {
                info.StopCheckTimer();
                info.StopRegisterTimer();
                info = null;
                this._register_map[account] = null;
            }

            // 创建一个新的
            if (info == null)
            {
                info = new RegisterObject(detail, this);
                this._register_map[account] = info;
            }
            
            // 移除
            remove_map[account] = null;
        }

        // 移除信息
        for (var account, info in remove_map)
        {
            info.StopCheckTimer();
            info.StopRegisterTimer();
            this._register_map[account] = null;
        }

        // 开始注册
        var delay_ms = 1000;
        var cur_count = 0;
        for (var account, info in this._register_map)
        {
            // 跳过正在注册
            if (!info.IsChecking())
            {
                info.StartRegisterTimer(delay_ms);
                cur_count += 1;
                if (this._max_per_second > 0 && cur_count >= this._max_per_second)
                {
                    cur_count = 0;
                    delay_ms = 1000;
                }
            }
        }
    }
}
