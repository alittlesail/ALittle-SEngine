
namespace ALittle;

protected struct RtpInfo
{
    string proxy_ip;	// 提供给客户端的 RTP 的地址
    string self_ip;	// 提供给线路的 RTP 的地址

    Map<SipSystem, Map<string, int>> call_id_map_port;	// CALLID映射表

    int cur_port;					// 当前递增的ip
    List<int> idle_list;		// 当前空闲列表

    int total_count;				// 端口总数
    int use_count;					// 使用个数

    int min_port;					// 最小端口
    int max_port;					// 最大端口

    MsgSession session;	// Rtp连接对象
}

// 使用Rtp结果
protected struct SipUseRtp
{
    string from_rtp_ip;
    int from_rtp_port;

    string to_rtp_ip;
    int to_rtp_port;

    int from_ssrc;
    int to_ssrc;

    // RTP归属的SIP系统和call_id
    string call_id;
    SipSystem sip_system;

    MsgSession session;	// Rtp连接对象
}

// SIP通知RTP，释放端口
public struct SIP2RTP_NRelease
{
    int first_port;
}

// SIP通知RTP，使用端口
public struct SIP2RTP_NUse
{
    int first_port;
    string call_id;

    // 和呼叫方的媒体通讯标识
    string from_rtp_ip;
    int from_rtp_port;
    int from_ssrc;

    // 和被呼叫方的媒体通讯表示
    string to_rtp_ip;
    int to_rtp_port;
    int to_ssrc;
}

public struct SIP2RTP_NSetFromRtp
{
    int first_port;
    string rtp_ip;
    int rtp_port;
}

public struct SIP2RTP_NSetToRtp
{
    int first_port;
    string rtp_ip;
    int rtp_port;
}

protected class RtpSystem
{
    // 当前所有的rtp服务器信息
    private Map<int, RtpInfo> _module_map_info = new Map<int, RtpInfo>();

    private string _proxy_ip;	// 提供给客户端的ip列表
    private string _self_ip;	 		// 提供给线路方的ip

    private int _start_port;		// RTP使用的起始端口
    private int _step_count;		// 每个RTP服务器使用的端口数量

    private int _group_port_count = 2;	// 搭配使用的端口数量个数

    public fun Setup(string proxy_ip, string self_ip, int start_port, int step_count)
    {
        this._proxy_ip = proxy_ip;
        this._self_ip = self_ip;

        this._start_port = start_port;
        this._step_count = step_count;

        A_SessionSystem.AddEventListener(this, this.HandleAnyDisconnect);
        A_SessionSystem.AddEventListener(this, this.HandleAnyConnect);
    }

    public fun Shutdown()
    {
        A_SessionSystem.RemoveEventListener(this, this.HandleAnyDisconnect);
        A_SessionSystem.RemoveEventListener(this, this.HandleAnyConnect);
    }

    // from_ip 表示呼叫来源的ip
    public fun UseRtp(SipSystem sip_system, string call_id, string from_ip, int from_ssrc, int to_ssrc) : SipUseRtp
    {
        // 先找到利用率最低的那个Rtp
        var min = 2.0;
        var target_info:RtpInfo = null;
        var target_route_num:int = null;
        for (var route_num, info in this._module_map_info)
        {
            if (info.total_count > 0 && info.total_count - info.use_count >= this._group_port_count)
            {
            	var rate = info.use_count / info.total_count;
                if (rate < min)
                {
                	target_info = info;
                    target_route_num = route_num;
                	min = rate;
                }
            }
		}

        // 检查是否有找到
        if (target_info == null) return null;

        // 个数添加
        target_info.use_count += this._group_port_count;

        // 获取新的端口
        var first_port = 0;
        if (target_info.idle_list[1] != null)
        {
            first_port = target_info.idle_list[1];
            List_Remove(target_info.idle_list, 1);
        }
        else
        {
            first_port = target_info.cur_port;
            target_info.cur_port += this._group_port_count;
        }

        // 把呼叫保存起来
        var call_id_map_port = target_info.call_id_map_port[sip_system];
        if (call_id_map_port == null)
        {
            call_id_map_port = new Map<string, int>();
            target_info.call_id_map_port[sip_system] = call_id_map_port;
        }
        call_id_map_port[call_id] = first_port;
    
        // 向Rtp服务器发送通知
        var msg = new SIP2RTP_NUse();
        msg.call_id = call_id;
        msg.first_port = first_port;

        // 如果来源ip是线路方，那么就是从线路方呼叫到客户端
        if (this._self_ip == from_ip)
        {
            msg.from_rtp_ip = this._self_ip;
            msg.to_rtp_ip = this._proxy_ip;
        }
        else
        {
            msg.from_rtp_ip = this._proxy_ip;
            msg.to_rtp_ip = this._self_ip;
        }

        msg.from_rtp_port = first_port;
        msg.to_rtp_port = first_port + 1;

        msg.from_ssrc = from_ssrc;
        msg.to_ssrc = to_ssrc;

        target_info.session.SendMsg(msg);

        // 设置返回值
		var result = new SipUseRtp();
        result.call_id = call_id;
        result.sip_system = sip_system;
        result.session = target_info.session;
        
        result.from_rtp_ip = msg.from_rtp_ip;
        result.from_rtp_port = msg.from_rtp_port;
        result.from_ssrc = from_ssrc;

        result.to_rtp_ip = msg.to_rtp_ip;
        result.to_rtp_port = msg.to_rtp_port;
        result.to_ssrc = to_ssrc;

        // 返回结果
        return result;
    }

    public fun ReleaseRtp(SipSystem sip_system, string call_id)
    {
        var info, first_port = this.GetRtpInfoByCallId(sip_system, call_id);
        if (info == null) return;

        var call_id_map_port = info.call_id_map_port[sip_system];
        if (call_id_map_port == null) return;

        call_id_map_port[call_id] = null;
    
        info.use_count -= this._group_port_count;
        List_Push(info.idle_list, first_port);
    
        var msg = new SIP2RTP_NRelease();
        msg.first_port = first_port;
        info.session.SendMsg(msg);
    }

    // 设置呼叫方Rtp
    public fun SetFromRtp(SipSystem sip_system, string call_id, string rtp_ip, int rtp_port)
    {
        var info, first_port = this.GetRtpInfoByCallId(sip_system, call_id);
        if (info == null) return;
        var msg = new SIP2RTP_NSetFromRtp();
        msg.first_port = first_port;
        msg.rtp_ip = rtp_ip;
        msg.rtp_port = rtp_port;
        info.session.SendMsg(msg);
    }

    // 设置被呼叫方Rtp
    public fun SetToRtp(SipSystem sip_system, string call_id, string rtp_ip, int rtp_port)
    {
        var info, first_port = this.GetRtpInfoByCallId(sip_system, call_id);
        if (info == null) return;
        var msg = new SIP2RTP_NSetToRtp();
        msg.first_port = first_port;
        msg.rtp_ip = rtp_ip;
        msg.rtp_port = rtp_port;
        info.session.SendMsg(msg);
    }

    // 根据call_id来返回Rtp信息，以及对应的第一个端口
    private fun GetRtpInfoByCallId(SipSystem sip_system, string call_id) : RtpInfo, int
    {
        for (var route_num, info in this._module_map_info)
        {
            var call_id_map_port = info.call_id_map_port[sip_system];
            if (call_id_map_port != null)
            {
                var first_port = call_id_map_port[call_id];
                if (first_port != null) return info, first_port;
            }
        }

        return null, null;
    }

    // 处理rtp断开连接
    private fun HandleAnyDisconnect(SessionDisconnectEvent event)
    {
        if (event.route_type != RouteType.RT_RTP) return;

        var info = this._module_map_info[event.route_num];
        if (info == null)
        {
            Error("route_id("..event.route_num.." is not exist!!!!!");
            return;
        }

        // 处理通话信息
        for (var sip_system, call_id_map_port in info.call_id_map_port)
        {
            for (var call_id, port in call_id_map_port)
                sip_system.StopCall(call_id, "rtp server disconnect");
        }

        // 删除信息
        this._module_map_info[event.route_num] = null;
    }

    // 处理rtp连接成功
    private fun HandleAnyConnect(SessionConnectEvent event)
    {
        if (event.route_type != RouteType.RT_RTP) return;

        var info = this._module_map_info[event.route_num];
        if (info != null)
        {
            Error("route_id("..event.route_num.." is already exist!!!!!");
            return;
        }

        // 创建rtp信息
        info = new RtpInfo();
        this._module_map_info[event.route_num] = info;

        // 保存连接对象
        info.session = event.session;

        // 增加RTP信息
        info.proxy_ip = this._proxy_ip;
        info.self_ip = this._self_ip;
        info.min_port = this._start_port + (event.route_num - 1) * this._step_count;
        info.max_port = info.min_port + this._step_count - 1;

        // 标记端口使用情况
        info.cur_port = info.min_port;
        info.total_count = info.max_port - info.min_port + 1;
        info.use_count = 0;

    	info.call_id_map_port = new Map<SipSystem, Map<string, int>>();	// CALLID映射表
    	info.idle_list = new List<int>();		// 当前空闲列表

        Log("SipServer receive new rtp:"..info.min_port..","..info.max_port);
    }
}

public var A_RtpSystem = new RtpSystem();