
namespace ALittle;

public enum SipStep
{
    // 呼出
    OUT_INVITE	  = 0;	// 正在发起呼叫
    OUT_TRYING	  = 1;	// 收到对方的trying
    OUT_RINGING	 = 2;	// 收到对方的响铃
    OUT_CANCELING   = 3;	// 对方还未接通前，正在停止呼叫

    // 呼入
    IN_INVITE	   = 4;	// 收到对方的INVITE
    IN_TRYING	   = 5;	// 我方发送trying
    IN_RINGING	  = 6;	// 我方发送ringing
    IN_OK		   = 7;	// 我方发送接听
    IN_FORBIDDEN	= 8;	// 我方无法接听，发送forbidden

    // 通话
    TALK			= 9;	// 处理通过中
    TALK_BYING	  = 10;   // 主动挂断
    TALK_END		= 11;   // 整通电话结束
}

public class SipCall
{
    // 归属的SipSystem
    public SipSystem _sip_system;

    protected ctor(SipSystem sip_system) { this._sip_system = sip_system; }

    // 账号密码
    public string _account;
    public string _password;

    // 是否支持100rel
    public bool _support_100rel = false;

    // 呼出还是呼入
    // 如果是呼入，那么对接的是呼叫方
    // 如果是呼出，那么对接的是被呼叫方
    public bool _out_or_in = false;

    // 呼入时的INVITE的CSEQ
    public int _callin_invite_cseq;
    // 呼入时INVITE使用的allow
    public string _callin_allow;

    // 呼出时使用的序列号
    public int _callout_cseq = 0;
    // 呼出时INVITE使用的序列号
    public int _callout_invite_cseq = 0;

    // 账号鉴权
    public string _callout_auth_nonce;
    public string _callout_auth_realm;
    public string _callout_auth_password;

    // 网元保活
    public int _session_expires = 0;
    public int _session_expires_last_time = 0;
    public bool _in_prack = false;

    // 呼出时是否有收到183 180
    public bool _receive_183_180 = false;

    // 定时检查流程
    public int _sip_send_time = 0;
    public int _sip_receive_time = 0;

	// 指令重发次数
	public int _invite_count = 0;
	public int _cancel_count = 0;
	public int _forbidden_count = 0;
	public int _ok_count = 0;
	public int _bye_count = 0;

    // 开始时间
    public int _start_time = 0;
    // 应答时间，用于计费使用
    public int _anwser_time = 0;

    // 呼叫失败的错误
    public string _stop_reason;

    // 呼叫标识
    public string _via_branch;
    public string _call_id;

    // 呼叫来源标识
    public string _from_sip_ip;
    public int _from_sip_port;
    public string _from_tag;
    public string _from_number;

    // 呼叫目标标识
    public string _to_sip_domain;
    public string _to_sip_ip;
    public int _to_sip_port;
    public string _to_tag;
    public string _to_number;

    // 编解码
    public int _audio_number;
    public string _audio_name;

    // 提供给线路方的RTP
    public SipUseRtp _use_rtp;

    // dtmf相关
    public string _dtmf_rtpmap;
    public string _dtmf_fmtp;
    public string _dtmf_number;

    // 当前状态
    public int _sip_step;

    // 对端的SIP的IP和端口
    public string _sip_ip;
    public int _sip_port;

    // SDP中 session 以及 version
    public string _sdp_session;

    public fun DispatchStepChanged()
    {
        var event = new SipCallStepEvent();
        event.call_info = this;
        this._sip_system.DispatchEvent(event);
    }

    // 处理SIP消息===================================================================================================================
    public fun HandleSipInfo(string method, string status, List<string> response_list, List<string> content_list)
    {
        // 保存接收时间
        this._sip_receive_time = Time_GetCurTime();

        if (method == "UPDATE")
        	this.HandleCallSipUpdate(method, status, response_list, content_list);
        elseif (this._sip_step == SipStep.OUT_INVITE)
            this.HandleSipInfoAtCallOutInvite(method, status, response_list, content_list);
        elseif (this._sip_step == SipStep.OUT_TRYING)
            this.HandleSipInfoAtCallOutTrying(method, status, response_list, content_list);
        elseif (this._sip_step == SipStep.OUT_RINGING)
            this.HandleSipInfoAtCallOutRinging(method, status, response_list, content_list);
        elseif (this._sip_step == SipStep.OUT_CANCELING)
            this.HandleSipInfoAtCallOutCanceling(method, status, response_list, content_list);
        elseif (this._sip_step == SipStep.IN_INVITE || this._sip_step == SipStep.IN_TRYING || this._sip_step == SipStep.IN_RINGING)
            this.HandleSipInfoAtCallInInvite(method, status, response_list, content_list);
        elseif (this._sip_step == SipStep.IN_OK)
            this.HandleSipInfoAtCallInOK(method, status, response_list, content_list);
        elseif (this._sip_step == SipStep.IN_FORBIDDEN)
            this.HandleSipInfoAtCallInForbidden(method, status, response_list, content_list);
        elseif (this._sip_step == SipStep.TALK)
            this.HandleSipInfoAtTalk(method, status, response_list, content_list);
        elseif (this._sip_step == SipStep.TALK_BYING)
            this.HandleSipInfoAtTalkBying(method, status, response_list, content_list);
    }

    // 停止通话======================================================================================================================
    public fun StopCall(string reason)
    {
        Log(this._call_id.." Stop Call:", reason);
        // 保存停止原因
        this._stop_reason = reason;

        if (this._sip_step == SipStep.OUT_INVITE || this._sip_step == SipStep.OUT_TRYING || this._sip_step == SipStep.OUT_RINGING)
            this.CallOutCancel();
        elseif (this._sip_step == SipStep.IN_INVITE || this._sip_step == SipStep.IN_TRYING || this._sip_step == SipStep.IN_RINGING)
            this.CallInForbidden();
        elseif (this._sip_step == SipStep.TALK)
            this.TalkBye();
    }

    // 接通部分======================================================================================================================
    public fun TalkBye()
    {
        this.TalkByeImpl();
        this._sip_system.AddResend(this);
    }

    public fun TalkByeImpl()
    {
        var auth = this.GenProxyAuth("BYE", false);
        this._callout_cseq += 1;

        var sip_head = this.GenCmd("BYE", !this._out_or_in);
        sip_head = sip_head..this.GenFromToCallID(!this._out_or_in);
		sip_head = sip_head.."CSeq: "..this._callout_cseq.." BYE\r\n";
		sip_head = sip_head..this.GenVia(!this._out_or_in);
		sip_head = sip_head..auth;
		sip_head = sip_head.."Reason: Q.850;cause=16;text=\"Normal call clearing\"\r\n";
		sip_head = sip_head.."User-Agent: ALittle\r\n";
		sip_head = sip_head.."Max-Forwards: 70\r\n";
		sip_head = sip_head.."Content-Length: 0\r\n\r\n";
        this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);

        this._sip_step = SipStep.TALK_BYING;
        this._sip_send_time = Time_GetCurTime();
        this._bye_count += 1;
        this.DispatchStepChanged();
    }

    public fun HandleSipInfoAtTalk(string method, string status, List<string> response_list, List<string> content_list)
    {
        if (method == "BYE")
        {
            var via = SipCall.GetKeyValueFromUDP(content_list, "VIA");
            var from = SipCall.GetKeyValueFromUDP(content_list, "FROM");
            var to = SipCall.GetKeyValueFromUDP(content_list, "TO");
            var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
            var call_id = SipCall.GetKeyValueFromUDP(content_list, "CALL-ID");

            var sip_head = "SIP/2.0 200 OK\r\n";
			sip_head = sip_head.."Via: "..via.."\r\n";
			sip_head = sip_head.."From: "..from.."\r\n";
			sip_head = sip_head.."To: "..to.."\r\n";
			sip_head = sip_head.."Call-ID: "..call_id.."\r\n";
			sip_head = sip_head.."CSeq: "..cseq.."\r\n";
			sip_head = sip_head.."Content-Length: 0\r\n\r\n";
            this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);

            this._sip_step = SipStep.TALK_END;
            this.DispatchStepChanged();
            return;
        }

        if (method == "INVITE")
        {
            var via = SipCall.GetKeyValueFromUDP(content_list, "VIA");
            var from = SipCall.GetKeyValueFromUDP(content_list, "FROM");
            var to = SipCall.GetKeyValueFromUDP(content_list, "TO");
            var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
            var call_id = SipCall.GetKeyValueFromUDP(content_list, "CALL-ID");

            var sip_body = this.GenSDP();

            var sip_head = "SIP/2.0 200 OK\r\n";
			sip_head = sip_head.."Via: "..via.."\r\n";
			sip_head = sip_head.."From: "..from.."\r\n";
			sip_head = sip_head.."To: "..to.."\r\n";
			sip_head = sip_head.."Call-ID: "..call_id.."\r\n";
			sip_head = sip_head.."CSeq: "..cseq.."\r\n";
			sip_head = sip_head.."User-Agent: ALittle\r\n";
			sip_head = sip_head.."Allow: INVITE,ACK,OPTIONS,REGISTER,INFO,BYE,UPDATE\r\n";
			sip_head = sip_head.."Contact: <sip:"..this._from_number.."@"..this._from_sip_ip..":"..this._from_sip_port..">\r\n";
			sip_head = sip_head.."Content-Type: application/sdp\r\n";
			sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";
            this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);

            return;
        }

        if (method == "OPTIONS")
        {
            var via = SipCall.GetKeyValueFromUDP(content_list, "VIA");
            var from = SipCall.GetKeyValueFromUDP(content_list, "FROM");
            var to = SipCall.GetKeyValueFromUDP(content_list, "TO");
            var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
            var call_id = SipCall.GetKeyValueFromUDP(content_list, "CALL-ID");

            var sip_body = this.GenSDP();

            var sip_head = "SIP/2.0 200 OK\r\n";
			sip_head = sip_head.."Via: "..via.."\r\n";
			sip_head = sip_head.."From: "..from.."\r\n";
			sip_head = sip_head.."To: "..to.."\r\n";
			sip_head = sip_head.."Call-ID: "..call_id.."\r\n";
			sip_head = sip_head.."CSeq: "..cseq.."\r\n";
			sip_head = sip_head.."User-Agent: ALittle\r\n";
			sip_head = sip_head.."Allow: INVITE,ACK,OPTIONS,REGISTER,INFO,BYE,UPDATE\r\n";
			sip_head = sip_head.."Contact: <sip:"..this._from_number.."@"..this._from_sip_ip..":"..this._from_sip_port..">\r\n";
			sip_head = sip_head.."Content-Type: application/sdp\r\n";
			sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";
            this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);

            return;
        }

        if (method == "ACK")
        {
            var audio_name, audio_number, dtmf_rtpmap, dtmf_fmtp, dtmf_number, rtp_ip, rtp_port = this.GetAudioInfoSDP(content_list);
            if (rtp_ip != null && rtp_ip != "")
            {
                if (this._out_or_in)
                    A_RtpSystem.SetToRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
                else
                    A_RtpSystem.SetFromRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
            }

            return;
        }

        if (method == "SIP/2.0" && status == "200")
        {
            var cseq_number, cseq_method = SipCall.GetCseqFromUDP(content_list);
            if (cseq_method == "INVITE")
            {
                var auth = this.GenProxyAuth("INVITE", true);

                var sip_head = this.GenCmd("ACK", false);
				sip_head = sip_head..this.GenFromToCallID(false);
				sip_head = sip_head.."CSeq: "..this._callout_cseq.." ACK\r\n";
				sip_head = sip_head..this.GenVia(false);
				sip_head = sip_head..auth;
				sip_head = sip_head.."User-Agent: ALittle\r\n";
				sip_head = sip_head.."Max-Forwards: 70\r\n";
				sip_head = sip_head.."Content-Length: 0\r\n\r\n";

                var reason = SipCall.GetKeyValueFromUDP(content_list, "REASON");
                if (reason != null && reason != "") this._stop_reason = reason;

                return;
            }
        }
    }

    public fun HandleSipInfoAtTalkBying(string method, string status, List<string> response_list, List<string> content_list)
    {
        var cseq_number, cseq_method = SipCall.GetCseqFromUDP(content_list);
        if (method == "SIP/2.0" && status == "200")
        {
            if (cseq_method == "BYE")
            {
                this._sip_step = SipStep.TALK_END;
                this.DispatchStepChanged();
                return;
            }

            if (cseq_method == "INVITE" && this._sip_step != SipStep.TALK)
            {
                this.HandleResponseOKForInvite(content_list);
                return;
            }

            return;
        }

        if (method == "BYE")
        {
            var via = SipCall.GetKeyValueFromUDP(content_list, "VIA");
            var from = SipCall.GetKeyValueFromUDP(content_list, "FROM");
            var to = SipCall.GetKeyValueFromUDP(content_list, "TO");
            var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
            var call_id = SipCall.GetKeyValueFromUDP(content_list, "CALL-ID");

            var sip_head = "SIP/2.0 200 OK\r\n";
			sip_head = sip_head.."Via: "..via.."\r\n";
			sip_head = sip_head.."From: "..from.."\r\n";
			sip_head = sip_head.."To: "..to.."\r\n";
			sip_head = sip_head.."Call-ID: "..call_id.."\r\n";
			sip_head = sip_head.."CSeq: "..cseq.."\r\n";
			sip_head = sip_head.."Content-Length: 0\r\n\r\n";
            this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);

            this._sip_step = SipStep.TALK_END;
            this.DispatchStepChanged();
            return;
        }

        var sxx = String_Sub(status, 1, 1);
        if (method == "SIP/2.0" && (sxx == "4" || sxx == "5" || sxx == "6"))
        {
            this._sip_step = SipStep.TALK_END;
            this.DispatchStepChanged();
            return;
        }
    }

    public fun SendSession(int cur_time)
    {
        if (cur_time - this._session_expires_last_time < this._session_expires / 2) return;
        this._session_expires_last_time = cur_time;

        this._callout_cseq += 1;

        var sip_body = this.GenSDP();

        var sip_head = this.GenCmd("UPDATE", !this._out_or_in);
        sip_head = sip_head..this.GenFromToCallID(!this._out_or_in);
		sip_head = sip_head.."CSeq: "..this._callout_cseq.." UPDATE\r\n";
		sip_head = sip_head..this.GenVia(!this._out_or_in);
		sip_head = sip_head.."User-Agent: ALittle\r\n";
		sip_head = sip_head.."Supported: timer\r\n";
		sip_head = sip_head.."Require: timer\r\n";
		sip_head = sip_head.."Session-Expires: "..this._session_expires..";refresher=uac\r\n";
		sip_head = sip_head.."Min-SE: "..this._session_expires.."\r\n";
		sip_head = sip_head.."Content-Type: application/sdp\r\n";
		sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";
        this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);
    }

    // 呼入部分======================================================================================================================
    public fun HandleSipInfoCreateCallInInvite(string method, string status, List<string> response_list, List<string> content_list
                                              , string self_sip_ip, int self_sip_port
                                              , string remote_sip_ip, int remote_sip_port) : string
    {
        // 保存对端端口
        this._sip_ip = remote_sip_ip;
        this._sip_port = remote_sip_port;

        // 保存接收事件
        this._sip_receive_time = Time_GetCurTime();
        // 初始化发送时间
        this._sip_send_time = this._sip_receive_time;

        if (this._start_time == null || this._start_time == 0) this._start_time = Time_GetCurTime();
        this._sip_step = SipStep.IN_INVITE;
        this._out_or_in = false;

        // 获取INVITE的CSeq
        this._callin_invite_cseq = SipCall.GetCseqFromUDP(content_list);
        if (this._callin_invite_cseq == null || this._callin_invite_cseq == 0) this._callin_invite_cseq = 1;

        // 如果是呼入那么呼出的从10开始
        this._callout_cseq = 10;

        // 读取from相关信息
        this._from_sip_ip, this._from_sip_port, this._via_branch = this.GetViaFromUDP(content_list);
        this._from_number, this._from_tag = SipCall.GetFromFromUDP(content_list);

        // 读取to相关信息
        this._to_sip_ip = self_sip_ip;
        this._to_sip_port = self_sip_port;
        this._to_number, this._to_tag = SipCall.GetToFromUDP(content_list);

        // 读取rtp相关信息
        var rtp_ip = "";
        var rtp_port = 0;
        this._audio_name, this._audio_number, this._dtmf_rtpmap, this._dtmf_fmtp, this._dtmf_number, rtp_ip, rtp_port = this.GetAudioInfoSDP(content_list);
        
        // 读取对应字段
        this._call_id = SipCall.GetKeyValueFromUDP(content_list, "CALL-ID");
        this._callin_allow = SipCall.GetKeyValueFromUDP(content_list, "ALLOW");

        // 返回trying
        {
            var sip_head = "SIP/2.0 100 Trying\r\n";
            sip_head = sip_head..this.GenFromToCallID(false);
            sip_head = sip_head.."CSeq: "..this._callin_invite_cseq.." INVITE\r\n";
            sip_head = sip_head..this.GenVia(false);
            sip_head = sip_head.."Contact: <sip:"..this._to_number.."@"..this._to_sip_ip..":"..this._to_sip_port..">\r\n";
            sip_head = sip_head.."Content-Length: 0\r\n\r\n";
            this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);
        }

        // 设置为trying状态
        this._sip_step = SipStep.IN_TRYING;
        this.DispatchStepChanged();

        // 检查呼叫来源
        if (!this._sip_system.CheckAccount(this._from_number, remote_sip_ip, remote_sip_port))
        	return "账号检查失败";

        // 随机出ssrc
        var from_ssrc = Math_RandomInt(1, 100000);
        var to_ssrc = Math_RandomInt(1, 100000);

        // 申请rtp资源
        var use_rtp = A_RtpSystem.UseRtp(this._sip_system, this._call_id, self_sip_ip, from_ssrc, to_ssrc);
        if (use_rtp == null) return "Rtp资源不足";

        // 保存rtp信息
        this._use_rtp = use_rtp;

        if (rtp_ip != null && rtp_ip != "")
        {
            if (this._out_or_in)
            	A_RtpSystem.SetToRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
            else
                A_RtpSystem.SetFromRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
        }

        // 添加到resend
        this._sip_system.AddResend(this);

        // 返回true表示，可以接受这个呼叫
        return null;
    }

    // 发送响铃
    public fun CallInRinging()
    {
        if (this._sip_step == SipStep.IN_TRYING)
        {
            if (this._to_tag == null || this._to_tag == "") this._to_tag = String_Md5(String_GenerateID("to_tag"));

            var sip_body = this.GenSDP();

            var sip_head = "SIP/2.0 183 Session Progress\r\n";
            sip_head = sip_head..this.GenFromToCallID(false);
            sip_head = sip_head.."CSeq: "..this._callin_invite_cseq.." INVITE\r\n";
            sip_head = sip_head..this.GenVia(false);
            sip_head = sip_head.."Allow: "..this._callin_allow.."\r\n";
            sip_head = sip_head.."Max-Forwards: 70\r\n";
            sip_head = sip_head.."Contact: <sip:"..this._to_number.."@"..this._to_sip_ip..":"..this._to_sip_port..">\r\n";
            sip_head = sip_head.."Content-Type: application/sdp\r\n";
            sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";
            this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);

            // 设置为ringing状态
            this._sip_step = SipStep.IN_RINGING;
            this.DispatchStepChanged();
        }
    }

    public fun HandleSipInfoAtCallInInvite(string method, string status, List<string> response_list, List<string> content_list)
    {
        if (method == "CANCEL")
        {
            var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
            var sip_body = this.GenSDP();

            var sip_head = "SIP/2.0 200 OK\r\n";
			sip_head = sip_head..this.GenFromToCallID(false);
			sip_head = sip_head.."CSeq: "..cseq.."\r\n";
			sip_head = sip_head..this.GenVia(false);
			sip_head = sip_head.."Max-Forwards: 70\r\n";
			sip_head = sip_head.."Content-Type: application/sdp\r\n";
			sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";
            this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);
            this._sip_step = SipStep.TALK_END;
            this.DispatchStepChanged();
            return;
        }
    }

    public fun CallInForbidden()
    {
        if (this._sip_step == SipStep.IN_RINGING || this._sip_step == SipStep.IN_INVITE || this._sip_step == SipStep.IN_TRYING)
            this.CallInForbiddenImpl();
    }

    public fun CallInForbiddenImpl()
    {
        if (this._to_tag == null || this._to_tag == "") this._to_tag = String_Md5(String_GenerateID("to_tag"));

        var sip_head = "SIP/2.0 403 Forbidden\r\n";
		sip_head = sip_head..this.GenFromToCallID(false);
		sip_head = sip_head.."CSeq: "..this._callin_invite_cseq.." INVITE\r\n";
		sip_head = sip_head..this.GenVia(false);
		sip_head = sip_head.."Max-Forwards: 70\r\n";
		sip_head = sip_head.."Content-Length: 0\r\n\r\n";
        this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);

        this._sip_step = SipStep.IN_FORBIDDEN;
        this._sip_send_time = Time_GetCurTime();
        this._forbidden_count += 1;
        this.DispatchStepChanged();
    }

    public fun CallInOK()
    {
        if (this._sip_step == SipStep.IN_RINGING || this._sip_step == SipStep.IN_INVITE || this._sip_step == SipStep.IN_TRYING)
        	this.CallInOKImpl();
    }

    public fun CallInOKImpl()
    {
        if (this._anwser_time == null || this._anwser_time == 0) this._anwser_time = Time_GetCurTime();

        var sip_body = this.GenSDP();

        var sip_head = "SIP/2.0 200 OK\r\n";
		sip_head = sip_head..this.GenFromToCallID(false);
		sip_head = sip_head.."CSeq: "..this._callin_invite_cseq.." INVITE\r\n";
		sip_head = sip_head..this.GenVia(false);
		sip_head = sip_head.."Allow: "..this._callin_allow.."\r\n";
		sip_head = sip_head.."Max-Forwards: 70\r\n";
		sip_head = sip_head.."Contact: <sip:"..this._to_number.."@"..this._to_sip_ip..":"..this._to_sip_port..">\r\n";
		sip_head = sip_head.."Content-Type: application/sdp\r\n";
		sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";
        this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);

        this._sip_step = SipStep.IN_OK;
        this._sip_send_time = Time_GetCurTime();
        this._ok_count += 1;
        this.DispatchStepChanged();
    }

    public fun HandleSipInfoAtCallInOK(string method, string status, List<string> response_list, List<string> content_list)
    {
        if (method == "ACK")
        {
            this._sip_step = SipStep.TALK;
            this._via_branch = "z9hG4bK-"..String_Md5(String_GenerateID("via_branch"));
            this.DispatchStepChanged();
            return;
        }
    }

    public fun HandleSipInfoAtCallInForbidden(string method, string status, List<string> response_list, List<string> content_list)
    {
        if (method == "ACK")
        {
            this._sip_step = SipStep.TALK_END;
            this.DispatchStepChanged();
            return;
        }

        if (method == "CANCEL")
        {
            var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
            var sip_body = this.GenSDP();

            var sip_head = "SIP/2.0 200 OK\r\n";
			sip_head = sip_head..this.GenFromToCallID(false);
			sip_head = sip_head.."CSeq: "..cseq.."\r\n";
			sip_head = sip_head..this.GenVia(false);
			sip_head = sip_head.."Max-Forwards: 70\r\n";
			sip_head = sip_head.."Content-Type: application/sdp\r\n";
			sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";
            this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);
            this._sip_step = SipStep.TALK_END;
            this.DispatchStepChanged();
            return;
        }

        if (method == "BYE")
        {
            var via = SipCall.GetKeyValueFromUDP(content_list, "VIA");
            var from = SipCall.GetKeyValueFromUDP(content_list, "FROM");
            var to = SipCall.GetKeyValueFromUDP(content_list, "TO");
            var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
            var call_id = SipCall.GetKeyValueFromUDP(content_list, "CALL-ID");

            var sip_head = "SIP/2.0 200 OK\r\n";
			sip_head = sip_head.."Via: "..via.."\r\n";
			sip_head = sip_head.."From: "..from.."\r\n";
			sip_head = sip_head.."To: "..to.."\r\n";
			sip_head = sip_head.."Call-ID: "..call_id.."\r\n";
			sip_head = sip_head.."CSeq: "..cseq.."\r\n";
			sip_head = sip_head.."Content-Length: 0\r\n\r\n";
            this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);
            this._sip_step = SipStep.TALK_END;
            this.DispatchStepChanged();
        }
    }

    // 呼出部分======================================================================================================================
    public fun CallOutInvite(int start_time)
    {
        this.CallOutInviteImpl(start_time);
        this._sip_system.AddResend(this);
    }

    public fun CallOutInviteImpl(int start_time)
    {
        if (this._start_time == null || this._start_time == 0) this._start_time = start_time;

        var sip_body = this.GenSDP();

        this._callout_cseq = 1;

        var auth = this.GenProxyAuth("INVITE", true);
        if (auth != null && auth != "") this._callout_cseq = 2;
        this._callout_invite_cseq = this._callout_cseq;

        var support = "";
        if (this._support_100rel) support = "Supported: 100rel,timer\r\n";

        var sip_head = this.GenCmd("INVITE", false);
		sip_head = sip_head..this.GenFromToCallID(false);
		sip_head = sip_head.."CSeq: "..this._callout_cseq.." INVITE\r\n";
		sip_head = sip_head..this.GenVia(false);
		sip_head = sip_head.."Allow: INVITE,ACK,OPTIONS,REGISTER,INFO,BYE,UPDATE\r\n";
		sip_head = sip_head.."Max-Forwards: 70\r\n";
		sip_head = sip_head..support;
		sip_head = sip_head.."Contact: <sip:"..this._from_number.."@"..this._from_sip_ip..":"..this._from_sip_port..">\r\n";
		sip_head = sip_head..auth;
		sip_head = sip_head.."User-Agent: ALittle\r\n";
		sip_head = sip_head.."Content-Type: application/sdp\r\n";
		sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";
        this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);

        this._sip_step = SipStep.OUT_INVITE;
        this._sip_send_time = Time_GetCurTime();
        this._invite_count += 1;
        this.DispatchStepChanged();
    }

    public fun CallOutCancel()
    {
        this._sip_step = SipStep.OUT_CANCELING;
        this._sip_send_time = Time_GetCurTime();
        this.DispatchStepChanged();

        if (this._in_prack) return;

        this._cancel_count += 1;

        var auth = this.GenProxyAuth("CANCEL", true);

        var sip_head = this.GenCmd("CANCEL", false);
		sip_head = sip_head..this.GenFromToCallID(false);
		sip_head = sip_head.."CSeq: "..this._callout_invite_cseq.." CANCEL\r\n";
		sip_head = sip_head..this.GenVia(false);
		sip_head = sip_head..auth;
		sip_head = sip_head.."User-Agent: ALittle\r\n";
		sip_head = sip_head.."Max-Forwards: 70\r\n";
		sip_head = sip_head.."Content-Length: 0\r\n\r\n";
        this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);
    }

    private fun CheckRequire100rel(List<string> content_list)
    {
        var require = SipCall.GetKeyValueFromUDP(content_list, "REQUIRE");
		if (require == null || !this._support_100rel || String_Find(require, "100rel") == null) return;

		this._callout_cseq += 1;
		this._in_prack = true;

		var rseq = SipCall.GetKeyValueFromUDP(content_list, "RSEQ");
		var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
		var sip_head = this.GenCmd("PRACK", false);
        sip_head = sip_head..this.GenFromToCallID(false);
        sip_head = sip_head.."CSeq: "..this._callout_cseq.." PRACK\r\n";
        sip_head = sip_head..this.GenVia(false);
        sip_head = sip_head..this.GenContact();
        sip_head = sip_head.."RAck: "..rseq.." "..cseq.."\r\n";
        sip_head = sip_head.."User-Agent: ALittle\r\n";
        sip_head = sip_head.."Max-Forwards: 70\r\n";
        sip_head = sip_head.."Content-Length: 0\r\n\r\n";
        this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);
    }

    public fun HandleSipInfoAtCallOutInvite(string method, string status, List<string> response_list, List<string> content_list)
    {
        if (method == "SIP/2.0" && (status == "100" || status == "181" || status == "182"))
        {
            var to_number = "";
            if (this._to_tag == null || this._to_tag == "") to_number, this._to_tag = SipCall.GetToFromUDP(content_list);
            this._sip_step = SipStep.OUT_TRYING;
            this.DispatchStepChanged();
            return;
        }

        var sxx = String_Sub(status, 1, 1);
        if (method == "SIP/2.0" && (status == "183" || status == "180" || sxx == "4" || sxx == "5" || sxx == "6"))
        {
            this.HandleSipInfoAtCallOutTrying(method, status, response_list, content_list);
            return;
        }
    }

    public fun HandleSipInfoAtCallOutTrying(string method, string status, List<string> response_list, List<string> content_list)
    {
        if (method == "SIP/2.0" && (status == "183" || status == "180"))
        {
            var to_number = "";
            if (this._to_tag == null || this._to_tag == "") to_number, this._to_tag = SipCall.GetToFromUDP(content_list);

            var audio_name, audio_number, dtmf_rtpmap, dtmf_fmtp, dtmf_number, rtp_ip, rtp_port = this.GetAudioInfoSDP(content_list);
            if (rtp_ip != null && rtp_ip != "")
            {
                if (this._out_or_in)
                    A_RtpSystem.SetToRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
                else
                    A_RtpSystem.SetFromRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
            }

            var reason = SipCall.GetKeyValueFromUDP(content_list, "REASON");
            if (reason != null && reason != "") this._stop_reason = reason;

            this._receive_183_180 = true;
            this._sip_step = SipStep.OUT_RINGING;
            this.DispatchStepChanged();
            this.CheckRequire100rel(content_list);
            return;
        }

        if (method == "SIP/2.0" && status == "200")
        {
            this.HandleSipInfoAtCallOutRinging(method, status, response_list, content_list);
            return;
        }

        if (method == "SIP/2.0" && status == "407")
        {
            var cseq = SipCall.GetCseqFromUDP(content_list);
            if (cseq == null) cseq = this._callout_cseq;

                // 只做一次验证
            if (this._callout_auth_nonce == null || this._callout_auth_nonce == "")
            {
                var to_number = "";
                if (this._to_tag == null || this._to_tag == "") to_number, this._to_tag = SipCall.GetToFromUDP(content_list);

                var sip_head = this.GenCmd("ACK", false);
				sip_head = sip_head..this.GenFromToCallID(false);
				sip_head = sip_head.."CSeq: "..cseq.." ACK\r\n";
				sip_head = sip_head..this.GenVia(false);
				sip_head = sip_head.."User-Agent: ALittle\r\n";
				sip_head = sip_head.."Max-Forwards: 70\r\n";
				sip_head = sip_head.."Content-Length: 0\r\n\r\n";
                this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);

                this._callout_auth_nonce, this._callout_auth_realm = SipCall.GetNonceRealmFromUDP(content_list, "PROXY-AUTHENTICATE");
                this._to_tag = "";
                this._via_branch = "z9hG4bK-"..String_Md5(String_GenerateID("via_branch"));
                this.CallOutInviteImpl(Time_GetCurTime());
            }
            else
            {
                var via = SipCall.GetKeyValueFromUDP(content_list, "VIA");
                var from = SipCall.GetKeyValueFromUDP(content_list, "FROM");
                var to = SipCall.GetKeyValueFromUDP(content_list, "TO");
                var call_id = SipCall.GetKeyValueFromUDP(content_list, "CALL-ID");

                var sip_head = this.GenCmd("ACK", false);
				sip_head = sip_head.."Via: "..via.."\r\n";
				sip_head = sip_head.."From: "..from.."\r\n";
				sip_head = sip_head.."To: "..to.."\r\n";
				sip_head = sip_head.."Call-ID: "..call_id.."\r\n";
				sip_head = sip_head.."CSeq: "..cseq.." ACK\r\n";
				sip_head = sip_head.."Content-Length: 0\r\n\r\n";
                this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);
            }

            return;
        }

        var sxx = String_Sub(status, 1, 1);
    	if (method == "SIP/2.0" && (sxx == "4" || sxx == "5" || sxx == "6"))
        {
            this.HandleSipInfoAtCallOutRinging(method, status, response_list, content_list);
            return;
        }
    }

    public fun HandleSipInfoAtCallOutRinging(string method, string status, List<string> response_list, List<string> content_list)
    {
        // 如果这个时候还发送鉴权信息， 就不用处理任何操作
        if (method == "SIP/2.0" && status == "407") return;

        var sxx = String_Sub(status, 1, 1);
    	if (method == "SIP/2.0" && (sxx == "4" || sxx == "5" || sxx == "6"))
        {
            var to_number = "";
            if (this._to_tag == null || this._to_tag == "") to_number, this._to_tag = SipCall.GetToFromUDP(content_list);

            var sip_head = this.GenCmd("ACK", false);
			sip_head = sip_head..this.GenFromToCallID(false);
			sip_head = sip_head.."CSeq: "..this._callout_invite_cseq.." ACK\r\n";
			sip_head = sip_head..this.GenVia(false);
			sip_head = sip_head.."User-Agent: ALittle\r\n";
			sip_head = sip_head.."Max-Forwards: 70\r\n";
			sip_head = sip_head.."Content-Length: 0\r\n\r\n";
            this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);

            var reason = SipCall.GetKeyValueFromUDP(content_list, "REASON");
            if (reason == null || reason == "") reason = status.."-FAILED";
            if (this._stop_reason == null || this._stop_reason == "") this._stop_reason = reason;

                // 如果是PRACK出错了，那么就不用结束这个会话
            var cseq_number, cseq_method = SipCall.GetCseqFromUDP(content_list);
            if (status == "500" && cseq_method == "PRACK") return;

            this._sip_step = SipStep.TALK_END;
            this.DispatchStepChanged();
            return;
        }

        if (method == "SIP/2.0" && (status == "183" || status == "180"))
        {
            var to_number = "";
            if (this._to_tag == null || this._to_tag == "") to_number, this._to_tag = SipCall.GetToFromUDP(content_list);

            var audio_name, audio_number, dtmf_rtpmap, dtmf_fmtp, dtmf_number, rtp_ip, rtp_port = this.GetAudioInfoSDP(content_list);
            if (rtp_ip != null && rtp_ip != "")
            {
                if (this._out_or_in)
                    A_RtpSystem.SetToRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
                else
                    A_RtpSystem.SetFromRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
            }

            var reason = SipCall.GetKeyValueFromUDP(content_list, "REASON");
            if (reason != null && reason != "") this._stop_reason = reason;

            this.CheckRequire100rel(content_list);
            return;
        }

        var cseq_number, cseq_method = SipCall.GetCseqFromUDP(content_list);
        if (method == "SIP/2.0" && status == "200")
        {
            if (cseq_method == "INVITE" && this._sip_step != SipStep.TALK)
            {
                this.HandleResponseOKForInvite(content_list);
                this._sip_step = SipStep.TALK;
                this.DispatchStepChanged();
                return;
            }

            if (cseq_method == "PRACK")
            {
                this._in_prack = false;
                return;
            }
        }

        if (method == "SIP/2.0" && status == "407")
        {
            var sip_head = this.GenCmd("ACK", false);
			sip_head = sip_head..this.GenFromToCallID(false);
			sip_head = sip_head.."CSeq: 1 ACK\r\n";
			sip_head = sip_head..this.GenVia(false);
			sip_head = sip_head.."User-Agent: ALittle\r\n";
			sip_head = sip_head.."Max-Forwards: 70\r\n";
			sip_head = sip_head.."Content-Length: 0\r\n\r\n";
            this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);

            return;
        }
    }

    public fun HandleSipInfoAtCallOutCanceling(string method, string status, List<string> response_list, List<string> content_list)
    {
        // 如果这个时候还发送鉴权信息， 就不用处理任何操作
        if (method == "SIP/2.0" && status == "407") return;

        var cseq_number, cseq_method = SipCall.GetCseqFromUDP(content_list);

        var sxx = String_Sub(status, 1, 1);
    	if (method == "SIP/2.0" && (sxx == "4" || sxx == "5" || sxx == "6"))
        {
            if (status == "500" && cseq_method == "CANCEL")
            {
                // 出现这个分支，很可能是因为发送CANCEL的时候，之前PRACK已发出但是还未收到200回复
                // 这个时候什么都不要做，等待定时器重发CANCEL
            }
            else
            {
                var to_number = "";
                if (this._to_tag == null || this._to_tag == "") to_number, this._to_tag = SipCall.GetToFromUDP(content_list);

                var sip_head = this.GenCmd("ACK", false);
				sip_head = sip_head..this.GenFromToCallID(false);
				sip_head = sip_head.."CSeq: "..this._callout_cseq.." ACK\r\n";
				sip_head = sip_head..this.GenVia(false);
				sip_head = sip_head.."User-Agent: ALittle\r\n";
				sip_head = sip_head.."Max-Forwards: 70\r\n";
				sip_head = sip_head.."Content-Length: 0\r\n\r\n";
                this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);

                var reason = SipCall.GetKeyValueFromUDP(content_list, "REASON");
                if (reason == null || reason == "") reason = status.."-CANCELING-FAILED";
                if (reason != null && reason != "") this._stop_reason = reason;

                this._sip_step = SipStep.TALK_END;
                this.DispatchStepChanged();
                return;
            }
        }

        if (method == "SIP/2.0" && status == "200")
        {
            if (cseq_method == "INVITE" && this._sip_step != SipStep.TALK)
            {
                this.HandleResponseOKForInvite(content_list);
                this._sip_step = SipStep.TALK;
                this.DispatchStepChanged();
                // 立刻发送bye的事件转为bye的状态
                this.StopCall("正在Cancel的时候收到200接听事件，现在立刻发送bye来挂断电话");
                return;
            }
        }
    }

    private fun HandleResponseOKForInvite(List<string> content_list)
    {
        if (this._sip_step == SipStep.TALK) return;

        var cseq_number, cseq_method = SipCall.GetCseqFromUDP(content_list);
        if (cseq_method != "INVITE") return;

        var to_number = "";
        if (this._to_tag == null || this._to_tag == "") to_number, this._to_tag = SipCall.GetToFromUDP(content_list);

        var audio_name, audio_number, dtmf_rtpmap, dtmf_fmtp, dtmf_number, rtp_ip, rtp_port = this.GetAudioInfoSDP(content_list);
        if (rtp_ip != null && rtp_ip != "")
        {
            if (this._out_or_in)
            	A_RtpSystem.SetToRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
            else
                A_RtpSystem.SetFromRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
        }

        if (this._anwser_time == null || this._anwser_time == 0) this._anwser_time = Time_GetCurTime();

        var auth = this.GenProxyAuth("INVITE", true);
        var session_expires = SipCall.GetKeyValueFromUDP(content_list, "SESSION-EXPIRES");
        var min_se = SipCall.GetKeyValueFromUDP(content_list, "MIN-SE");

        var sip_head = this.GenCmd("ACK", false);
        sip_head = sip_head..this.GenFromToCallID(false);
        sip_head = sip_head.."CSeq: "..cseq_number.." ACK\r\n";
        sip_head = sip_head..this.GenVia(false);
        sip_head = sip_head..auth;

        if (session_expires != null && session_expires != "")
        {
            sip_head = sip_head.."Supported: timer\r\n";
            sip_head = sip_head.."Require: timer\r\n";
            sip_head = sip_head.."Session-Expires: "..session_expires.."\r\n";
            if (min_se != null && min_se != "") sip_head = sip_head.."Min-SE: "..min_se.."\r\n";

            var session_expires_list = String_Split(session_expires, ";");
            if (session_expires_list[1] != null)
            {
                this._session_expires = Math_ToIntOrZero(session_expires_list[1]);
                if (this._session_expires > 1 && session_expires_list[2] == "refresher=uac")
                {
                    this._session_expires_last_time = 0;
                    this._sip_system.AddSession(this);
                }
            }
        }

        sip_head = sip_head.."User-Agent: ALittle\r\n";
        sip_head = sip_head.."Max-Forwards: 70\r\n";
        sip_head = sip_head.."Content-Length: 0\r\n\r\n";
        this._sip_system.Send(sip_head, this._sip_ip, this._sip_port);

        var reason = SipCall.GetKeyValueFromUDP(content_list, "REASON");
        if (reason != null && reason != "") this._stop_reason = reason;

    }

    public fun HandleCallSipUpdate(string method, string status, List<string> response_list, List<string> content_list)
    {
        var via = SipCall.GetKeyValueFromUDP(content_list, "VIA");
        var from = SipCall.GetKeyValueFromUDP(content_list, "FROM");
        var to = SipCall.GetKeyValueFromUDP(content_list, "TO");
        var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
        var call_id = SipCall.GetKeyValueFromUDP(content_list, "CALL-ID");

        var session_expires = SipCall.GetKeyValueFromUDP(content_list, "SESSION-EXPIRES");
        var min_se = SipCall.GetKeyValueFromUDP(content_list, "MIN-SE");

        var sip_head = "SIP/2.0 200 OK\r\n";
		sip_head = sip_head.."Via: "..via.."\r\n";
		sip_head = sip_head.."From: "..from.."\r\n";
		sip_head = sip_head.."To: "..to.."\r\n";
		sip_head = sip_head.."Call-ID: "..call_id.."\r\n";
		sip_head = sip_head.."CSeq: "..cseq.."\r\n";

        if (session_expires != null && session_expires != "")
        {
            sip_head = sip_head.."Supported: timer\r\n";
            sip_head = sip_head.."Require: timer\r\n";
            sip_head = sip_head.."Session-Expires: "..session_expires.."\r\n";
            if (min_se != null && min_se != "") sip_head = sip_head.."Min-SE: "..min_se.."\r\n";
        }

        var sip_body = "";

        var audio_name, audio_number, dtmf_rtpmap, dtmf_fmtp, dtmf_number, rtp_ip, rtp_port = this.GetAudioInfoSDP(content_list);
        if (rtp_ip != null && rtp_ip != "")
        {
            if (this._out_or_in)
                A_RtpSystem.SetToRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
            else
                A_RtpSystem.SetFromRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);

            sip_body = this.GenSDP();
            sip_head = sip_head.."Content-Type: application/sdp\r\n";
        }

        sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";
        this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);
    }

    public fun HandleCallSipReInvite(string method, string status, List<string> response_list, List<string> content_list)
    {
        var via = SipCall.GetKeyValueFromUDP(content_list, "VIA");
        var from = SipCall.GetKeyValueFromUDP(content_list, "FROM");
        var to = SipCall.GetKeyValueFromUDP(content_list, "TO");
        var cseq = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
        var call_id = SipCall.GetKeyValueFromUDP(content_list, "CALL-ID");

        var session_expires = SipCall.GetKeyValueFromUDP(content_list, "SESSION-EXPIRES");
        var min_se = SipCall.GetKeyValueFromUDP(content_list, "MIN-SE");

        var sip_head = "SIP/2.0 200 OK\r\n";
		sip_head = sip_head.."Via: "..via.."\r\n";
		sip_head = sip_head.."From: "..from.."\r\n";
		sip_head = sip_head.."To: "..to.."\r\n";
		sip_head = sip_head.."Call-ID: "..call_id.."\r\n";
		sip_head = sip_head.."CSeq: "..cseq.."\r\n";

        if (session_expires != null && session_expires != "")
        {
            sip_head = sip_head.."Supported: timer\r\n";
            sip_head = sip_head.."Require: timer\r\n";
            sip_head = sip_head.."Session-Expires: "..session_expires.."\r\n";
            if (min_se != null && min_se != "") sip_head = sip_head.."Min-SE: "..min_se.."\r\n";
        }

        sip_head = sip_head..this.GenContact();

        var sip_body = "";

        var audio_name, audio_number, dtmf_rtpmap, dtmf_fmtp, dtmf_number, rtp_ip, rtp_port = this.GetAudioInfoSDP(content_list);
        if (rtp_ip != null && rtp_ip != "")
        {
            if (this._out_or_in)
            	A_RtpSystem.SetToRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
            else
                A_RtpSystem.SetFromRtp(this._use_rtp.sip_system, this._use_rtp.call_id, rtp_ip, rtp_port);
        }

        sip_body = this.GenSDP();
        sip_head = sip_head.."Content-Type: application/sdp\r\n";
        sip_head = sip_head.."Content-Length: "..String_Len(sip_body).."\r\n\r\n";

        this._sip_system.Send(sip_head..sip_body, this._sip_ip, this._sip_port);
    }

    // 通用接口======================================================================================================================
    public fun GenProxyAuth(string method, bool use_to_number) : string
    {
        var auth = "";
        if (this._callout_auth_nonce != null && this._callout_auth_nonce != "")
        {
            var to_number = "";
            if (use_to_number) to_number = this._to_number.."@";
            var uri = "sip:"..to_number..this._to_sip_ip..":"..this._to_sip_port;
            if (this._to_sip_domain != null && this._to_sip_domain != "")
            	uri = "sip:"..to_number..this._to_sip_domain;

            auth = SipCall.GenAuth(this._callout_auth_nonce, this._callout_auth_realm, this._account, this._password, method, uri);
            auth = "Proxy-Authorization: "..auth.."\r\n";
        }

        return auth;
    }

    public static GenAuthResponse(string nonce, string realm, string account, string password, string method, string uri) : string
    {
        var response_1 = String_Md5(account..":"..realm..":"..password);
        var response_2 = String_Md5(method..":"..uri);
        var response = String_Md5(response_1..":"..nonce..":"..response_2);

        return response;
    }

    public static GenAuth(string nonce, string realm, string account, string password, string method, string uri) : string
    {
        var response = SipCall.GenAuthResponse(nonce, realm, account, password, method, uri);
        return "Digest username=\""..account.."\",realm=\""..realm.."\",nonce=\""..nonce.."\",uri=\""..uri.."\",response=\""..response.."\",algorithm=MD5";
    }

    public fun GenCmd(string method, bool swap) : string
    {
		if (swap)
		{
    		if (this._to_sip_domain != null && this._to_sip_domain != "")
    			return method.." sip:"..this._from_number.."@"..this._to_sip_domain.." SIP/2.0\r\n";
			else
				return method.." sip:"..this._from_number.."@"..this._from_sip_ip..":"..this._from_sip_port.." SIP/2.0\r\n";
		}
		else
		{
			if (this._to_sip_domain != null && this._to_sip_domain != "")
				return method.." sip:"..this._to_number.."@"..this._to_sip_domain.." SIP/2.0\r\n";
			else
				return method.." sip:"..this._to_number.."@"..this._to_sip_ip..":"..this._to_sip_port.." SIP/2.0\r\n";
		}
	}

    public fun GenFromToCallID(bool swap) : string
    {
		var sip = "";

        if (swap)
        {
            if (this._to_sip_domain != null && this._to_sip_domain != "")
            	sip = sip.."From: <sip:"..this._to_number.."@"..this._to_sip_domain..";transport=UDP>";
            else
            	sip = sip.."From: <sip:"..this._to_number.."@"..this._to_sip_ip..":"..this._to_sip_port..";transport=UDP>";
            if (this._to_tag != null && this._to_tag != "") sip = sip..";tag="..this._to_tag;
            sip = sip.."\r\n";
        
            if (this._to_sip_domain != null && this._to_sip_domain != "")
            	sip = sip.."To: <sip:"..this._from_number.."@"..this._to_sip_domain..";transport=UDP>";
            else
            	sip = sip.."To: <sip:"..this._from_number.."@"..this._from_sip_ip..":"..this._from_sip_port..";transport=UDP>";
            if (this._from_tag != null && this._from_tag != "") sip = sip..";tag="..this._from_tag;
            sip = sip.."\r\n";
        }
        else
        {
            if (this._to_sip_domain != null && this._to_sip_domain != "")
            	sip = sip.."From: <sip:"..this._from_number.."@"..this._to_sip_domain..";transport=UDP>";
            else
            	sip = sip.."From: <sip:"..this._from_number.."@"..this._from_sip_ip..":"..this._from_sip_port..";transport=UDP>";
            if (this._from_tag != null && this._from_tag != "") sip = sip..";tag="..this._from_tag;
            sip = sip.."\r\n";
        
            if (this._to_sip_domain != null && this._to_sip_domain != "")
            	sip = sip.."To: <sip:"..this._to_number.."@"..this._to_sip_domain..";transport=UDP>";
            else
            	sip = sip.."To: <sip:"..this._to_number.."@"..this._to_sip_ip..":"..this._to_sip_port..";transport=UDP>";
            if (this._to_tag != null && this._to_tag != "") sip = sip..";tag="..this._to_tag;
            sip = sip.."\r\n";
        }
    
        sip = sip.."Call-ID: "..this._call_id.."\r\n";
    
    	return sip;
    }

	public fun GenVia(bool swap) : string
    {
		if (swap)
    		return "Via: SIP/2.0/UDP "..this._to_sip_ip..":"..this._to_sip_port..";rport;branch="..this._via_branch.."\r\n";
		else
			return "Via: SIP/2.0/UDP "..this._from_sip_ip..":"..this._from_sip_port..";rport;branch="..this._via_branch.."\r\n";
	}

    public fun GenSDP() : string
    {
        if (this._sdp_session == null)
        	this._sdp_session = Time_GetCurTime().."";

        // 确定rtp的IP和端口
        var rtp_ip = this._use_rtp.from_rtp_ip;
        var rtp_port = this._use_rtp.from_rtp_port;
        if (this._out_or_in)
        {
            rtp_ip = this._use_rtp.to_rtp_ip;
            rtp_port = this._use_rtp.to_rtp_port;
        }

    	var sdp = "v=0\r\n";
        sdp = sdp.."o=- "..this._sdp_session.." "..this._sdp_session.." IN IP4 "..rtp_ip.."\r\n";
        sdp = sdp.."s=ALittle\r\n";
        sdp = sdp.."c=IN IP4 "..rtp_ip.."\r\n";
        sdp = sdp.."t=0 0\r\n";
        sdp = sdp.."m=audio "..rtp_port.." RTP/AVP "..this._audio_number.." "..this._dtmf_number.."\r\n";
        sdp = sdp.."a=rtpmap:"..this._audio_number.." "..this._audio_name.."/8000\r\n";
        sdp = sdp.."a=fmtp:"..this._audio_number.." annexb=no\r\n";
        sdp = sdp..this._dtmf_rtpmap.."\r\n";
        sdp = sdp..this._dtmf_fmtp.."\r\n";
        sdp = sdp.."a=sendrecv\r\n";
    	return sdp;
    }

    public fun GenContact() : string
    {
		if (this._out_or_in)
    		return "Contact: <sip:"..this._from_number.."@"..this._from_sip_ip..":"..this._from_sip_port..">\r\n";
		else
			return "Contact: <sip:"..this._to_number.."@"..this._to_sip_ip..":"..this._to_sip_port..">\r\n";
	}

    public static GetKeyValueFromUDP(List<string> content_list, string upper_key) : string
    {
    	for (var index, content in content_list)
        {
            var key_value = String_Split(content, ":");
        	if (List_Len(key_value) >= 2)
        	{
                if (String_Upper(String_Trim(key_value[1])) == upper_key)
                {
                    List_Remove(key_value, 1);
                	return String_Trim(String_Join(key_value, ":"));
        		}
        	}
    	}

        return null;
	}

    // Digest realm="Yate", nonce="257949169194d46137a8de272f42741d.1621327485", stale=FALSE, algorithm=MD5
    // Digest username="865946730535",realm="Yate",nonce="c13162deec0b0376e80c597b12645950.1624500598",uri="127.0.0.1:5060",response="8c170953e65d6f91565e769fcec0d10e",algorithm=MD5
    // return nonce, realm, uri, response
    public static GetNonceRealmFromUDP(List<string> content_list, string upper_key) : string, string, string, string
    {
        var value = SipCall.GetKeyValueFromUDP(content_list, upper_key);
		if (value == null) return null, null, null, null;

        var nonce = "";
        {
            var pos_1 = String_Find(value, "nonce=\"");
            if (pos_1 == null) return null, null, null, null;

            pos_1 += String_Len("nonce=\"");
            var pos_2 = String_Find(value, "\"", pos_1);
            if (pos_2 == null) return null, null, null, null;

            nonce = String_Sub(value, pos_1, pos_2 - 1);
        }

        var realm = "";
        {
            var pos_1 = String_Find(value, "realm=\"");
            if (pos_1 == null) return null, null, null, null;

            pos_1 += String_Len("realm=\"");
            var pos_2 = String_Find(value, "\"", pos_1);
            if (pos_2 == null) return null, null, null, null;

            realm = String_Sub(value, pos_1, pos_2 - 1);
        }

        var uri = "";
        {
            var pos_1 = String_Find(value, "uri=\"");
            if (pos_1 != null)
            {
                pos_1 += String_Len("uri=\"");
                var pos_2 = String_Find(value, "\"", pos_1);
                if (pos_2 != null)
                	uri = String_Sub(value, pos_1, pos_2 - 1);
            }
        }

        var response = "";
        {
            var pos_1 = String_Find(value, "response=\"");
            if (pos_1 != null)
            {
                pos_1 += String_Len("response=\"");
                var pos_2 = String_Find(value, "\"", pos_1);
                if (pos_2 != null)
					response = String_Sub(value, pos_1, pos_2 - 1);
            }
        }

        return nonce, realm, uri, response;
    }

    // Cseq:1 INVITE
    // return seq method
    public static GetCseqFromUDP(List<string> content_list) : int, string
    {
        var value = SipCall.GetKeyValueFromUDP(content_list, "CSEQ");
		if (value == null) return null, null;

        var split_list = String_Split(value, " ", 1, true);
        return Math_ToIntOrZero(split_list[1]), split_list[2];
    }

    // Via: SIP/2.0/UDP 127.0.0.1:58527;rport;branch=z9hG4bK1533536407
    // return to_sip_ip, to_sip_port, branch
    public fun GetViaFromUDP(List<string> content_list) : string, int, string
    {
		var value = SipCall.GetKeyValueFromUDP(content_list, "VIA");
		if (value == null) return null, null, null;

        // find out first space and jump SIP/2.0/UDP
        var pos = String_Find(value, " ");
    	if (pos == null) return null, null, null;
        value = String_Sub(value, pos + 1);

		var split_list = String_Split(value, ";");

		// get first info
		if (split_list[1] == null) return null, null, null;
		var split_list_sip = String_Split(split_list[1], ":");
		if (split_list_sip[1] == null) return null, null, null;
		var to_sip_ip = split_list_sip[1];
		var to_sip_port = "5060";
		if (split_list_sip[2] != null) to_sip_port = split_list_sip[2];

        // find branch
		var branch = "";
        for (var index, content in split_list)
		{
			pos = String_Find(content, "branch=");
            if (pos != null)
            {
                branch = String_Sub(content, pos + 7);
                break;
            }
		}
		return to_sip_ip, Math_ToIntOrZero(to_sip_port), branch;
	}

    // From: <sip:865946730534@127.0.0.1:5060>;tag=1639312120
    // return from_number, from_tag
    public static GetFromFromUDP(List<string> content_list) : string, string
    {
		var value = SipCall.GetKeyValueFromUDP(content_list, "FROM");
		if (value == null) return null, null;

        return SipCall.GetFromOrToFromUDP(value);
    }

    // To: <sip:865946730534@127.0.0.1:5060>;tag=1639312120
    // return to_number, to_tag
    public static GetToFromUDP(List<string> content_list) : string, string
    {
		var value = SipCall.GetKeyValueFromUDP(content_list, "TO");
		if (value == null) return null, null;

        return SipCall.GetFromOrToFromUDP(value);
    }

    // From: <sip:865946730534@127.0.0.1:5060>;tag=1639312120
    // To: <sip:865946730534@127.0.0.1:5060>;tag=1639312120
    // return number, tag
    private static GetFromOrToFromUDP(string value) : string, string
    {
        var pos_begin = String_Find(value, "sip:");
        if (pos_begin == null)
		{
			pos_begin = String_Find(value, "tel:");
            if (pos_begin == null) return null, null;
		}

        var pos_end = String_Find(value, "@");
		if (pos_end == null)
		{
			pos_end = String_Find(value, ";");
			if (pos_end == null) pos_end = String_Find(value, ">");
			if (pos_end == null) return null, null;
		}
		if (pos_begin >= pos_end) return null, null;

		var from_number = String_Sub(value, pos_begin + 4, pos_end - 1);

        var from_tag = "";
        var split_list = String_Split(value, "tag=");
		if (split_list[2] != null) from_tag = split_list[2];

		return from_number, from_tag;
    }

    // v=0
    // o=yate 1621328152 1621328152 IN IP4 127.0.0.1
    // s=SIP Call
    // c=IN IP4 127.0.0.1
    // t=0 0
    // m=audio 16728 RTP/AVP 8 101
    // a=rtpmap:8 PCMA/8000
    // a=fmtp:8 annexb=no
    // a=rtpmap:101 telephone-event/8000
    // return audio_name, audio_number, dtmf_rtpmap, dtmf_fmtp, dtmf_number, rtp_ip, rtp_port
    public fun GetAudioInfoSDP(List<string> content_list) : string, int, string, string, string, string, int
    {
        var rtp_ip = "";
        for (var index, content in content_list)
		{
            var pos = String_Find(content, "c=IN IP4 ");
            if (pos != null)
            {
                rtp_ip = String_Sub(content, pos + 9);
                break;
            }
		}
    	var rtp_port = 0;
        for (var index, content in content_list)
		{
            var pos = String_Find(content, "m=audio ");
            if (pos != null)
            {
                var split_list = String_Split(content, " ");
                if (split_list[2] != null) rtp_port = Math_ToIntOrZero(split_list[2]);
                break;
            }
		}

        var audio_name = "";
        var audio_number = "";
        for (var index, content in content_list)
		{
			if (String_Sub(content, 1, 1) == "a")
            {
                var pos = String_Find(content, "G");
                if (pos == null) pos = String_Find(content, "P");
                if (pos != null)
                {
                    var pos_2 = String_Find(content, "/");
                    if (pos_2 != null) audio_name = String_Sub(content, pos, pos_2 - 1);
                
                    var pos_3 = String_Find(content, ":");
                    if (pos_3 != null) audio_number = String_Sub(content, pos_3 + 1, pos - 2);
                	break;
                }
            }
		}

        var dtmf_rtpmap = "";
        var dtmf_number = "";
		for (var index, content in content_list)
		{
            if (String_Sub(content, 1, 1) == "a")
            {
                var pos = String_Find(content, "telephone-event");
                if (pos != null)
                {
                    dtmf_rtpmap = content;
                    var pos_1 = String_Find(content, ":");
                    var pos_2 = String_Find(content, " ");
                    if (pos_1 != null && pos_2 != null)
                        dtmf_number = String_Sub(content, pos_1 + 1, pos_2 - 1);
                    break;
        	    }
			}
		}

		var fmtp_number = "fmtp:"..dtmf_number;
        var dtmf_fmtp = "";
        for (var index, content in content_list)
		{
            if (String_Sub(content, 1, 1) == "a")
            {
                var pos = String_Find(content, fmtp_number);
                if (pos != null)
                {
                    dtmf_fmtp = content;
                    break;
                }
            }
		}

		if (audio_name == "")
		{
			audio_name = "PCMA";
			audio_number = "8";
		}

		return audio_name, Math_ToIntOrZero(audio_number), dtmf_rtpmap, dtmf_fmtp, dtmf_number, rtp_ip, rtp_port;
	}
}
