namespace ALittle;

// 连接信息
struct ThirdPartySessionInfo
{
    string new_client;
    string old_client;
    int time;
}

// 踢下线
public struct S2CThirdPartyForceLogout
{
    string reason;
}

// 服务器下发账号信息
public struct S2CThirdPartyAccountInfo
{
    string account_id;
    string account_name;
}

// 服务器下发web信息
public struct S2CThirdPartyServerInfo
{
    string http_ip;
    int http_port;
}

// 服务器下发验证码
public struct S2CThirdPartySession
{
    string session_id;
}
// 第三方账号
public class ThirdPartyAccount
{
    // 用来标记是否已经登录成功
    private bool _is_login;
    // 验证码信息
    private ThirdPartySessionInfo _session_info;
    // 客户端连接
    private MsgReceiver _client;
    // 账号ID
    private string _account_id;
    // 账号名
    private string _account_name;

    public ctor(MsgReceiver client, string account_id, string account_name)
    {
        // 初始化验证码信息
        this._session_info = new ThirdPartySessionInfo();
        this._session_info.old_client = "s"..lua.tostring(lua.math.random(100000, 999999));
        this._session_info.new_client = this._session_info.old_client;
        this._session_info.time = lua.os.time(null);

        // 初始化客户端，以及其他信息
        this._client = client;

        this._account_id = account_id;
        this._account_name = account_name;
    }

    // 获取接口
    public fun IsLogin() : bool { return this._is_login; }
    public fun IsDataReady() : bool { return this._is_login; }
    public fun GetID() : string { return this._account_id; }
    public fun GetAccountName() : string { return this._account_name; }
    public fun GetClient() : MsgReceiver { return this._client; }

    // 发送数据包
    public fun SendMsg<T:struct>(T msg)
    {
        if (this._client == null) return;
        this._client.SendMsg(msg);
    }

        // 强制踢下线
    public fun ForceLogout(string reason)
    {
        var param = new S2CThirdPartyForceLogout();
        param.reason = reason;
        this._client.SendMsg(param);
    }

    // 系统登出成功之后调用
    protected fun LogoutActionSystem()
    {
        this._is_login = false;
    }

    // 系统登录成功之后调用
    protected fun LoginActionSystem()
    {
        this._is_login = true;

        // 生成验证码并同步给客户端
        this.GenSessionCodeAndSync();

        // 发送账号信息
        {
            var param = new S2CThirdPartyAccountInfo();
            param.account_id = this._account_id;
            param.account_name = this._account_name;
            this._client.SendMsg(param);
        }

        // 发送服务器信息
        {
            var param = new S2CThirdPartyServerInfo();
            param.http_ip = __CPPAPI_ServerSchedule.GetHttpServerYunIp();
            if (param.http_ip == null || param.http_ip == "")
                param.http_ip = __CPPAPI_ServerSchedule.GetHttpServerIp();
            param.http_port = __CPPAPI_ServerSchedule.GetHttpServerPort();
            this._client.SendMsg(param);
        }
    }

    // 生成并同步验证码
    protected fun GenSessionCodeAndSync()
    {
        this._session_info.old_client = this._session_info.new_client;
        this._session_info.new_client = "s"..lua.tostring(lua.math.random(100000, 999999));
        this._session_info.time = lua.os.time(null);

        var param = new S2CThirdPartySession();
        param.session_id = this._session_info.new_client;
        this._client.SendMsg(param);
    }

    // 检查并同步验证码
    protected fun CheckSessionCodeAndSync(string session_code) : bool
    {
        if (session_code == null || session_code == "") return false;
        session_code = lua.tostring(session_code);
        var result = this._session_info.old_client == session_code || this._session_info.new_client == session_code;

        if (lua.os.time(null) - this._session_info.time > 300)
            this.GenSessionCodeAndSync();

        return result;
    }
}