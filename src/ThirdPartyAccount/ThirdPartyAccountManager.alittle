namespace ALittle;

public struct ThirdPartyAccountLoginEvent : Event
{
    ThirdPartyAccount account;
}

public struct ThirdPartyAccountLogoutEvent : Event
{
    ThirdPartyAccount account;
}

// 账号管理器
public class ThirdPartyAccountManager : EventDispatcher
{
    private GatewayUpdateRoute _update_route;

    private Map<string, ThirdPartyAccount> _id_map_account;            // Id映射账号对象
    private Map<MsgReceiver, ThirdPartyAccount> _client_map_account;   // 客户端映射账号对象
    private int _account_count;                                 // 账号数量
    private Functor<await(string,string):string,string> _login_check;

    public ctor()
    {
        this._id_map_account = new Map<string, ThirdPartyAccount>();
        this._client_map_account = new Map<MsgReceiver, ThirdPartyAccount>();
        this._account_count = 0;
    }

    // login_check 表示登录验证回调
    // 第一个参数是账号名
    // 第二个参数是密码
    // 第一个返回值 如果验证成功就返回null，如果失败就返回失败原因
    // 第二个返回值 账号ID
    public fun Setup(Functor<await(string,string):string,string> login_check)
    {
        // 保存登录验证接口
        this._login_check = login_check;
        // 监听Session事件
        this._update_route = new GatewayUpdateRoute(__CPPAPI_ServerSchedule.GetClientServerYunIp()
                             , __CPPAPI_ServerSchedule.GetClientServerIp()
                             , __CPPAPI_ServerSchedule.GetClientServerPort()
                             , __CPPAPI_ServerSchedule.GetHttpServerYunIp()
                             , __CPPAPI_ServerSchedule.GetHttpServerIp()
                             , __CPPAPI_ServerSchedule.GetHttpServerPort()
                             , this._account_count);
    
        // 监听客户端事件
        A_ClientSystem.AddEventListener(this, this.HandleClientDisconnect);
        A_ClientSystem.AddEventListener(this, this.HandleClientConnect);
    }

    // 根据账号ID获取对象
    public fun GetAccountById(string account_id) : ThirdPartyAccount
    {
        return this._id_map_account[account_id];
    }

    // 获取所有账号
    public fun SendMsgToAll<T:struct>(T msg)
    {
        for (var id, account in this._id_map_account)
        	account.SendMsg(msg);
    }

    // 根据连接获取对象
    public fun GetAccountByClient(IMsgCommon client) : ThirdPartyAccount
    {
        return this._client_map_account[cast<MsgReceiver>(client)];
    }

    // 添加账号对象
    protected fun AddAccount(ThirdPartyAccount account)
    {
        this._client_map_account[account.GetClient()] = account;
        this._id_map_account[account.GetID()] = account;
        ++ this._account_count;
    }

    // 移除账号对象
    protected fun RemoveAccount(string account_id)
    {
        var account = this._id_map_account[account_id];
        if (account == null) return;

        this._id_map_account[account_id] = null;
        this._client_map_account[account.GetClient()] = null;
        -- this._account_count;
    
        this._update_route.UpdateRouteWeight(this._account_count);
    }

    // 强制登出
    public fun ForceLogout(string account_id, string reason) : bool
    {
        var account = this._id_map_account[account_id];
        if (account == null) return false;

            // 登出实践
        var logout_event = new ThirdPartyAccountLogoutEvent();
        logout_event.account = account;
        this.DispatchEvent(logout_event);

        // 提示登出
        account.ForceLogout(reason);
        // 执行登出逻辑
        account.LogoutActionSystem();
        // 移除
        this.RemoveAccount(account_id);
        return true;
    }

    // 对http请求进行验证
    public fun CheckLoginById(string account_id, string session_id) : ThirdPartyAccount
    {
        var account = this.GetAccountById(account_id);
        assert(account != null, "请先登录");
        assert(account.CheckSessionCodeAndSync(session_id), "请先登录");
        return account;
    }

    // 检查客户端
    public fun CheckLoginByClient(IMsgCommon client) : ThirdPartyAccount
    {
        var account = this.GetAccountByClient(client);
        assert(account != null, "请先登录");
        return account;
    }

    public fun Shutdown()
    {

    }

    // 处理客户端断开连接
    protected fun HandleClientDisconnect(ClientDisconnectEvent event)
    {
        // 标记客户端未登陆
        event.msg_receiver._thirdparty_is_logining = false;
        // 处理已登录的
        var account = this.GetAccountById(event.msg_receiver._thirdparty_account_id);
        if (account == null) return;

            // 登出回调
        var logout_event = new ThirdPartyAccountLogoutEvent();
        logout_event.account = account;
        this.DispatchEvent(event);

        event.msg_receiver._thirdparty_account_id = "";
        // 执行登出逻辑
        account.LogoutActionSystem();
        // 移除掉
        this.RemoveAccount(account.GetID());
    }

    protected fun HandleClientConnect(ClientConnectEvent event)
    {
    }
}

public var A_ThirdPartyAccountManager = new ThirdPartyAccountManager();

public struct QThirdPartyLogin
{
    string account_name;		// 账号名
    string account_pwd;			// 密码
}

public struct AThirdPartyLogin
{

}

[Msg]
public await static HandleQThirdPartyLogin(IMsgCommon client, QThirdPartyLogin msg) : AThirdPartyLogin
{
    var receiver = cast<MsgReceiver>(client);
    assert(receiver._thirdparty_account_id == "" || receiver._thirdparty_account_id == null, "当前连接已经登录");

    var error:string = null;
    var account_id:string = null;

    // 检查账号是否存在
    assert(A_ThirdPartyAccountManager._login_check != null, "没有设置登录验证回调");
    error, account_id = A_ThirdPartyAccountManager._login_check(msg.account_name, msg.account_pwd);
    if (error != null) throw("登录验证失败:"..error);
    
    // 如果有另一个账号登录，那么就踢下线
    var other_account = A_ThirdPartyAccountManager.GetAccountById(account_id);
    if (other_account != null)
    {
        var other_client = other_account.GetClient();
        other_account.ForceLogout("您的账号再另一个地方登录了");
        other_account.LogoutActionSystem();
        A_ThirdPartyAccountManager.RemoveAccount(account_id);
        if (other_client != null) other_client._thirdparty_account_id = "";
    }

    // 创建账号对象
    var thirdparty_account = new ThirdPartyAccount(receiver, account_id, msg.account_name);
    A_ThirdPartyAccountManager.AddAccount(thirdparty_account);

    // 标记为已登录成功
    receiver._thirdparty_account_id = account_id;

    // 开始执行登录逻辑
    thirdparty_account.LoginActionSystem();

    // 登陆事件
    var login_event = new ThirdPartyAccountLoginEvent();
    login_event.account = thirdparty_account;
    A_ThirdPartyAccountManager.DispatchEvent(login_event);

    // 上报负载
    A_ThirdPartyAccountManager._update_route.UpdateRouteWeight(A_ThirdPartyAccountManager._account_count);

    return new AThirdPartyLogin();
}

public struct QThirdPartyLogout
{

}

public struct AThirdPartyLogout
{

}

[Msg]
public await static HandleQThirdPartyLogout(IMsgCommon client, QThirdPartyLogout msg) : AThirdPartyLogout
{
    // 如果还未登录，那么就直接忽略掉这个数据包
    var receiver = cast<MsgReceiver>(client);
    assert(receiver._thirdparty_account_id != null && receiver._thirdparty_account_id != "", "当前连接还未登录");

    var thirdparty_account = A_ThirdPartyAccountManager.GetAccountByClient(receiver);
    assert(thirdparty_account != null, "账号还未登录");

    // 登出事件
    var logout_event = new ThirdPartyAccountLogoutEvent();
    logout_event.account = thirdparty_account;
    A_ThirdPartyAccountManager.DispatchEvent(logout_event);

    // 清空标记
    receiver._thirdparty_account_id = "";
    // 执行登出逻辑
    thirdparty_account.LogoutActionSystem();
    // 把账号从映射表中删除
    A_ThirdPartyAccountManager.RemoveAccount(thirdparty_account.GetID());

    return new AThirdPartyLogout();
}