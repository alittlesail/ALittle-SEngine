
register namespace lua;

public class __CPPAPIServerSchedule
{
    // 数据库
    public fun StartMysqlQuery(int thread_count, string ip, string username, string password, int port, string db_name) {}
    public fun AddMysqlStatement(int thread_id, int query_id, lua.__CPPAPIMysqlStatementQuery query) : bool {}
    public fun AddMysqlNormal(int thread_id, int query_id, string sql) : bool {}
    public fun AddMysqlEmpty(int thread_d, int query_id) : bool {}

    // http客户端
    public fun HttpGet(int id, string url) {}
    public fun HttpPost(int id, string url, string type, string content) {}

    // http服务器
    public fun CreateHttpServer(string yun_ip, string ip, int port, bool is_ssl) : bool {}
    public fun GetHttpServerYunIp() : string {}
    public fun GetHttpServerIp() : string {}
    public fun GetHttpServerPort() : int {}

    public fun HttpClose(int http_id) {}
    public fun HttpSendString(int http_id, string content) {}
    public fun HttpSendFile(int http_id, string file_path, int start_size) {}
    public fun HttpStartReceiveFile(int http_id, string file_path, int start_size) : bool {}

    // 客户端服务，如果rudp设置为true，表示打开udp可靠性服务
    public fun CreateClientServer(string yun_ip, string ip, int port, bool rudp) : bool {}
    public fun GetClientServerYunIp() : string {}
    public fun GetClientServerIp() : string {}
    public fun GetClientServerPort() : int {}

    public fun ClientClose(int client_id) {}
    public fun ClientSend(int client_id, ALittle.IMessageWriteFactory factory) {}

    // 释放rtp
    public fun ReleaseRtp(int first_port) {}
    // 释放所有rtp
    public fun ReleaseAllRtp() {}

    // 设置呼叫方的IP和端口
    public fun SetFromRtp(int first_port, string rtp_ip, int rtp_port) {}

    // 设置被呼叫方的IP和端口
    public fun SetToRtp(int first_port, string rtp_ip, int rtp_port) {}

    // 清理空闲rtp，可以定时调用
    // idle_delta_time 表示超过多少秒的空闲清理掉
    public fun ClearIdleRtp(int idle_delta_time) {}

    // 开始使用rtp
    // first_port 是作为复用RTP的主键
    // call_id SIP协议中的CALL-ID
	// from_rtp_ip 表示要使用的ip列表，用于和客户端互发媒体包。
	// to_rtp_ip 表示要使用的ip，用于和线路方互发RTP包
    public fun UseRtp(int first_port, string call_id
                     , string from_rtp_ip, int from_rtp_port
                     , string to_rtp_ip, int to_rtp_port) {}

	// 启动服务器
	public fun CreateUdpServer(string ip, int port) : bool {}
    public fun CloseUdpServer(string ip, int port) {}
    // 设置参数
	// self_ip，self_port 自己这一方面的IP和端口
    // remote_ip, remote_port 对端的IP和端口
    // message 要发送的消息内容
    public fun SendUdpMessage(string self_ip, int self_port, string remote_ip, int remote_port, string message) {}

    // 服务端服务
    public fun StartRouteSystem(int route_type, int route_num) {}
    public fun GetRouteType() : int {}
    public fun GetRouteNum() : int {}
    public fun GetRouteId() : int {}

    public fun CreateConnectServer(string yun_ip, string ip, int port) {}
    public fun GetConnectServerYunIp() : string {}
    public fun GetConnectServerIp() : string {}
    public fun GetConnectServerPort() : int {}
    
    public fun CreateConnectClient(string ip, int port) {}
    public fun ConnectSession(int route_type, int route_num) {}
    public fun CalcConnectKey(int src_route_type, int src_route_num, int dst_route_type, int dst_route_num) : int {}
    
    public fun SessionClose(int connect_key) { }
    public fun SessionSend(int connect_key, ALittle.IMessageWriteFactory factory) {}
}

public var __CPPAPI_ServerSchedule:__CPPAPIServerSchedule;
