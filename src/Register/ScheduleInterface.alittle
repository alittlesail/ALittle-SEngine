
register namespace lua;

public class __CPPAPIServerSchedule
{
    // 文件缓存
    public fun UseFileCache(bool value) {}
    // 设置最大缓存大小
    public fun SetFileCacheMaxSize(int max_size) {}
    // 清理所有
    public fun SetFileCacheClearAll() {}
    // 如果当前所有文件的大小总和超过max_size，那么就清理到max_size为止
    public fun SetFileCacheClearByMaxSize(int max_size) {}
    // 根据文件路径来清理
    public fun SetFileCacheClearByFilePath(string file_path) {}
    // 如果某些文件超过size的大小，那么清理掉
    public fun SetFileCacheClearBySize(int size) {}
    // 如果最后使用的时间小于time，那么就清理掉
    public fun SetFileCacheClearByTime(int time) {}

    // 数据库
    public fun StartMysqlQuery(int thread_count, string ip, string username, string password, int port, string db_name) {}
    public fun AddMysqlStatement(int thread_id, int query_id, lua.__CPPAPIMysqlStatementQuery query) : bool {}
    public fun AddMysqlNormal(int thread_id, int query_id, string sql) : bool {}
    public fun AddMysqlEmpty(int thread_d, int query_id) : bool {}

    // http客户端
    public fun HttpGet(int id, string url) {}
    public fun HttpPost(int id, string url, string type, string content) {}

    // http服务器
    public fun CreateHttpServer(string yun_ip, string ip, int port, bool is_ssl) : bool {}
    public fun GetHttpServerYunIp() : string {}
    public fun GetHttpServerIp() : string {}
    public fun GetHttpServerPort() : int {}

    public fun HttpClose(int http_id) {}
    public fun HttpSendString(int http_id, string content) {}
    public fun HttpSendFile(int http_id, string file_path, int start_size) {}
    public fun HttpStartReceiveFile(int http_id, string file_path, int start_size) : bool {}

    // 客户端服务，如果rudp设置为true，表示打开udp可靠性服务
    public fun CreateClientServer(string yun_ip, string ip, int port, bool rudp) : bool {}
    public fun GetClientServerYunIp() : string {}
    public fun GetClientServerIp() : string {}
    public fun GetClientServerPort() : int {}

    public fun ClientClose(int client_id) {}
    public fun ClientSend(int client_id, ALittle.IMessageWriteFactory factory) {}

    // 释放rtp
    public fun ReleaseRtp(int first_port) {}
    // 释放所有rtp
    public fun ReleaseAllRtp() {}

    // 设置线路方的rtp
    public fun SetRemoteRtp(int first_port, string remote_rtp_ip, int remote_rtp_port) {}

    // 设置内部转发rtp
    public fun SetInnerRtp(int first_port, string inner_rtp_ip, int inner_rtp_port) {}

    // 转接到client_id
    public fun TransClient(int first_port, int client_id) {}

    // 清理空闲rtp，可以定时调用
    // idle_delta_time 表示超过多少秒的空闲清理掉
    public fun ClearIdleRtp(int idle_delta_time) {}

    // 开始使用rtp
	// client_rtp_ip_string 表示要使用的ip列表，多个用;隔开，用于和客户端互发媒体包。
	//						因为客户端的网络可能是不同运营商，运营商之前会互相拦截数据包
	//						所以这里可以开多个不同的运营商ip，来兼容客户端不同的网络
	// self_rtp_ip 表示要使用的ip，用于和线路方互发RTP包
	// inner_rtp_ip 表示要使用的ip，用于内部rtp服务器转发媒体包，用于转接的场景
    // remote_rtp_ip 表示线路方的ip，已经确定了就不填空串
    // call_id SIP协议中的CALL-ID
    // client_id 和客户端通话的标识
    // ssrc 和线路通话的标识
    public fun UseRtp(int first_port
                     , string client_rtp_ip_string, int client_rtp_port
                     , string self_rtp_ip, int self_rtp_port
                     , string inner_rtp_ip, int inner_rtp_port
                     , string remote_rtp_ip, int remote_rtp_port
                     , string call_id, int client_id, int ssrc) {}

	// 启动服务器
	// self_sip_ip self_sip_port 己端的SIP的IP和端口
	// remote_sip_ip remote_sip_port 对端的SIP的IP和端口
	// register_uri 对端的注册域名，如果没有就填空串，比如移动的ims.fj.chinamobile.com
	// register_expires 对端注册的超时时间，一般是3600
	public fun StartSip(string self_sip_ip, int self_sip_port
                    , string remote_sip_ip, int remote_sip_port
                    , string register_uri, int register_expires) : bool {}
    public fun CloseSip() {}
    // 注册SIP账号
    public fun RegisterSipAccount(string account, string password) {}

    // 服务端服务
    public fun StartRouteSystem(int route_type, int route_num) {}
    public fun GetRouteType() : int {}
    public fun GetRouteNum() : int {}
    public fun GetRouteId() : int {}

    public fun CreateConnectServer(string yun_ip, string ip, int port) {}
    public fun GetConnectServerYunIp() : string {}
    public fun GetConnectServerIp() : string {}
    public fun GetConnectServerPort() : int {}
    
    public fun CreateConnectClient(string ip, int port) {}
    public fun ConnectSession(int route_type, int route_num) {}
    public fun CalcConnectKey(int src_route_type, int src_route_num, int dst_route_type, int dst_route_num) : int {}
    
    public fun SessionClose(int connect_key) { }
    public fun SessionSend(int connect_key, ALittle.IMessageWriteFactory factory) {}
}

public var __CPPAPI_ServerSchedule:__CPPAPIServerSchedule;
